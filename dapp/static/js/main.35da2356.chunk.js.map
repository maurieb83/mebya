{"version":3,"sources":["model/Interact.js","model/EventTable.js","model/LogoSoferim.png","model/Modal.js","model/Help.js","App.js","index.js"],"names":["require","config","web3","process","contractABI","contractAddress","myContract","eth","Contract","lastToken","a","data","methods","getInfo","call","lastTokenCreated","account","tokenId","code256","date","createToken","walletAddress","tokenID","ext","exists","wallet","tkExist","exist","transactionParameters","to","from","safeMint","encodeABI","window","ethereum","request","method","params","txHash","success","getCurrentTime","timestamp","d","Date","toLocaleDateString","toLocaleTimeString","connectWallet","addressArray","obj","status","address","message","getCurrentWalletConnected","length","target","rel","href","idToken","LastTokenTable","props","Fragment","id","currentToken","substring","slice","ModalCreate","Modal","size","aria-labelledby","keyboard","backdrop","centered","Body","style","color","action","type","name","readOnly","value","token","placeholder","hash","contract","display","className","aria-hidden","fontSize","marginBottom","ModalEmpty","Footer","Button","onClick","onHide","ModalWallet","ModalReject","ModalAlreadyExist","ModalLoad","HelpSection","App","useState","setToken","setIdToken","modalShow","setModalShow","modalEmptyShow","setModalEmptyShow","modalWalletShow","setModalWalletShow","modalLoadShow","setModalLoadShow","modalReject","setModalReject","setWallet","setStatus","setHash","alreadyShow","setModalAlreadyExist","idContract","setIdContract","useEffect","addWalletListener","updateData","document","getElementById","on","accounts","onCreatePressed","isNaN","Number","parseInt","createdToken","setTimeout","connectWalletPressed","walletResponse","src","LogoSoferim","alt","String","paddingTop","defaultValue","show","Messages","empty","metaNotInstalled","rejected","load","ReactDOM","render"],"mappings":"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","file":"static/js/main.35da2356.chunk.js","sourcesContent":["require('dotenv').config()\n\nconst Web3 = require(\"web3\");\nconst rpcURL = `https://rinkeby.infura.io/v3/${process.env.REACT_APP_URL_INFURA_KEY}`;\nconst web3 = new Web3(rpcURL);\n\nconst contractABI = require(\"../contract-abi.json\");\nconst contractAddress = process.env.REACT_APP_CONTRACT_ADDRESS;\n\nconst myContract = new web3.eth.Contract(contractABI, contractAddress);\n\nexport const lastToken = async () => {\n    let data = [];\n    let lastTokenCreated = await myContract.methods.getInfo().call()\n    data[0] = lastTokenCreated.account\n    data[1] = lastTokenCreated.tokenId\n    data[2] = lastTokenCreated.code256\n    data[3] = lastTokenCreated.date\n    return {data, lastTokenCreated}\n};\n\nexport const createToken = async (walletAddress, tokenID) => {\n    const ext = exists(tokenID)\n    if (!walletAddress) {\n        return{wallet: true}\n    }else if((await ext).tkExist == true){\n        return {exist : true};\n    }\n    const transactionParameters = {\n        to: contractAddress,\n        from: walletAddress,\n        data: myContract.methods.safeMint(walletAddress, tokenID).encodeABI()\n    }\n    //sign the transaction\n    try {\n        const txHash = await window.ethereum.request({\n            method: \"eth_sendTransaction\",\n            params: [transactionParameters],\n        });\n        return {txHash, success: true};\n    } catch (error) {\n        return \"\";\n    }\n}\n\nexport const getCurrentTime = (timestamp) => {\n    const d = new Date(timestamp * 1000);\n\n    const timeStampCon = d.toLocaleDateString() + \"    \" + d.toLocaleTimeString();\n    return timeStampCon;\n};\n\nexport const connectWallet = async () => {\n    if (window.ethereum) {\n        try {\n            const addressArray = await window.ethereum.request({\n                method: \"eth_requestAccounts\",\n            });\n            const obj = {\n                status: \"Wallet Connected!!\",\n                address: addressArray[0],\n            };\n            return obj;\n        } catch (err) {\n            return {\n                address: \"\",\n                status: \"😥 \" + err.message,\n            };\n        }\n    } else {\n        return 0\n    };\n}\n\nexport const getCurrentWalletConnected = async () => {\n    if (window.ethereum) {\n        try {\n            const addressArray = await window.ethereum.request({\n                method: \"eth_accounts\",\n            });\n            if (addressArray.length > 0) {\n                return {\n                    address: addressArray[0],\n                    status: \"Billetera conectada\",\n                };\n            } else {\n                return {\n                    address: \"\",\n                    status: \"Conecta tu billetera usando el boton 'Conectar billetera'.\",\n                };\n            }\n        } catch (err) {\n            return {\n                address: \"\",\n                status: \"😥 \" + err.message,\n            };\n        }\n    } else {\n        return {\n            address: \"\",\n            status: (\n                <span>\n                    <p>\n                        {\" \"}\n                        🦊{\" \"}\n                        <a target=\"_blank\" rel=\"noreferrer\" href={`https://metamask.io/download.html`}>\n                            Debe instalar MetaMask para poder operar en la plataforma.\n                        </a>\n                    </p>\n                </span>\n            ),\n        };\n    }\n};\n\nexport const exists = async (idToken) => {\n    const tkExist = await myContract.methods.exists(idToken).call()\n    if (tkExist == true){\n    return {tkExist : true}\n    } else {\n        return {tkExist : false}\n    }\n}\n\n/*const XHR = require('xhr2-cookies').XMLHttpRequest\nXHR.prototype._onHttpRequestError = function (request, error) {\n    if (this._request !== request) {\n        return;\n    }\n    // A new line\n    console.log(error, 'request')\n    this._setError();\n    request.abort();\n    this._setReadyState(XHR.DONE);\n    this._dispatchProgress('error');\n    this._dispatchProgress('loadend');\n};*/\n\n/*export const createToken = async (walletAddress, tokenID) => {\n    web3.eth.getTransactionCount(walletAddress, (err, txCount) => {\n\n        const txObject = {\n            nonce: web3.utils.toHex(txCount),\n            gasLimit: web3.utils.toHex(8000000), // Raise the gas limit to a much higher amount\n            gasPrice: web3.utils.toHex(web3.utils.toWei('10', 'gwei')),\n            to: contractAddress,\n            data: myContract.methods.safeMint(walletAddress, tokenID).encodeABI()\n        }\n        const tx = new Tx(txObject, { chain: 'rinkeby' });\n        const signedTx = tx.sign(privateKey);\n\n        const serializedTx = tx.serialize();\n        const raw = '0x' + serializedTx.toString('hex');\n\n        web3.eth.sendSignedTransaction(raw, (err, txHash) => {\n            console.log('err:', err, 'txHash:', txHash);\n            // Use this txHash to find the contract on Etherscan!\n        })\n    })\n};\n*/\n","import React from \"react\";\r\nimport { getCurrentTime } from \"./Interact\";\r\n\r\nexport const LastTokenTable = (props) => {\r\n    return (\r\n        <React.Fragment>\r\n            <div>\r\n                <h2>Token más reciente </h2>\r\n                <table id=\"lastTokenTable\">\r\n                    <tbody>\r\n                        {props.currentToken ? (\r\n                            <React.Fragment>\r\n                                <tr>\r\n                                    <th>Cuenta</th>\r\n                                    <th>ID-Token</th>\r\n                                    <th>Código</th>\r\n                                    <th>Fecha de creación</th>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td id=\"owner\">{props.currentToken[0].substring(0, 6) + \"...\" + props.currentToken[0].substring(38)}</td>\r\n                                    <td id=\"tokenId\">{props.currentToken[1].slice(0, 15)}</td>\r\n                                    <td id=\"code\">{props.currentToken[2].slice(0, 15)}</td>\r\n                                    <td id=\"timestamp\">{getCurrentTime(props.currentToken[3])}</td>\r\n                                </tr>\r\n                            </React.Fragment>\r\n                        )\r\n                            : (<React.Fragment>\r\n                                <tr>\r\n                                    <td>No hay tokens que mostrar</td>\r\n                                </tr>\r\n                            </React.Fragment>\r\n                            )}\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        </React.Fragment>\r\n    )\r\n}\r\n","export default __webpack_public_path__ + \"static/media/LogoSoferim.e9c55ba3.png\";","import React from \"react\";\r\nimport { Modal, Button } from 'react-bootstrap';\r\nimport { getCurrentTime } from \"./Interact\";\r\n\r\nexport const ModalCreate = (props) => {\r\n    return (\r\n        <Modal\r\n            {...props}\r\n            size=\"lg\"\r\n            aria-labelledby=\"contained-modal-title-vcenter\"\r\n            keyboard={false}\r\n            backdrop=\"static\"\r\n            centered\r\n        >\r\n            <Modal.Body>\r\n                <h4 style={{color: 'black'}}>Éxito!! 🦊</h4>\r\n                <div id=\"form-div\">\r\n                    <form id=\"form-token\" method=\"post\" action=\"\">\r\n                        <div id=\"div-form-input-container\">\r\n                            <input\r\n                            type=\"text\"\r\n                            name=\"idToken\"\r\n                            readOnly=\"readOnly\"\r\n                            value={props.token[1]}\r\n                            placeholder='ID-Token'\r\n                            />\r\n                            <input\r\n                            type=\"text\"\r\n                            name=\"owner\"\r\n                            readOnly=\"readOnly\"\r\n                            value={props.token[0]}\r\n                            placeholder='Cuenta'\r\n                            />\r\n                            <input\r\n                            type=\"text\"\r\n                            name=\"code\"\r\n                            readOnly=\"readOnly\"\r\n                            value={props.token[2]}\r\n                            placeholder='Código'\r\n                            />\r\n                            <input\r\n                            type=\"text\"\r\n                            name=\"timestamp\"\r\n                            readOnly=\"readOnly\"\r\n                            value={getCurrentTime(props.token[3])}\r\n                            placeholder='Fecha de creación'\r\n                            />\r\n                            <input\r\n                            type=\"text\"\r\n                            name=\"hash\"\r\n                            readOnly=\"readOnly\"\r\n                            value={props.hash}\r\n                            placeholder='Hash de transacción'\r\n                            />\r\n                            <input\r\n                            type=\"text\"\r\n                            name=\"idContract\"\r\n                            readOnly=\"readOnly\"\r\n                            value={props.contract}\r\n                            style={{display: \"none\"}}\r\n                            />\r\n                        </div>\r\n                        <div id=\"div-form-text-container\">\r\n                            <p>{props.message}</p>\r\n                            <div id=\"div-load\">\r\n                                <h1><i className=\"fab fa-ethereum\" aria-hidden=\"true\" style={{fontSize: \"1.7em\", marginBottom: \"0.6em\", color: \"black\"}}/> <br></br></h1>\r\n                            </div>\r\n                            <button id='formButton' type=\"submit\">OK</button>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            </Modal.Body>\r\n        </Modal>\r\n    );\r\n}\r\n\r\nexport const ModalEmpty = (props) => {\r\n    return (\r\n        <Modal\r\n            {...props}\r\n            size=\"md\"\r\n            aria-labelledby=\"contained-modal-title-vcenter\"\r\n            centered\r\n        >\r\n            <Modal.Body>\r\n                <h4>Oops!!</h4>\r\n                <p>\r\n                    {props.message}\r\n                </p>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <Button onClick={props.onHide}>Cerrar</Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    );\r\n}\r\n\r\nexport const ModalWallet = (props) => {\r\n    return (\r\n        <Modal\r\n            {...props}\r\n            size=\"md\"\r\n            aria-labelledby=\"contained-modal-title-vcenter\"\r\n            keyboard={false}\r\n            backdrop=\"static\"\r\n            centered\r\n        >\r\n            <Modal.Body>\r\n                <h4>MetaMask desconectado</h4>\r\n                <p>\r\n                    {props.message}\r\n                </p>\r\n                <p>Puedes descargar MetaMask <a\r\n                    target=\"blank\"\r\n                    href=\"https://metamask.io/download.html\"\r\n                    onClick={props.onHide}>aquí </a>\r\n                    si no lo tienes instalado en tu navegador</p>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <Button onClick={props.onHide}>Cerrar</Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    );\r\n}\r\n\r\nexport const ModalReject = (props) => {\r\n    return (\r\n        <Modal\r\n            {...props}\r\n            size=\"md\"\r\n            aria-labelledby=\"contained-modal-title-vcenter\"\r\n            centered\r\n        >\r\n            <Modal.Body>\r\n                <h4>Operación rechazada</h4>\r\n                <p>\r\n                    {props.message}\r\n                </p>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <Button onClick={props.onHide}>Cerrar</Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    );\r\n}\r\n\r\nexport const ModalAlreadyExist = (props) => {\r\n    return (\r\n        <Modal\r\n            {...props}\r\n            size=\"md\"\r\n            aria-labelledby=\"contained-modal-title-vcenter\"\r\n            centered\r\n        >\r\n            <Modal.Body>\r\n                <h4>Ya existe 🤔</h4>\r\n                <p>\r\n                    {props.message}\r\n                </p>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <Button onClick={props.onHide}>Cerrar</Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    );\r\n}\r\n\r\nexport const ModalLoad = (props) => {\r\n    return (\r\n        <Modal\r\n            {...props}\r\n            size=\"md\"\r\n            aria-labelledby=\"contained-modal-title-vcenter\"\r\n            centered\r\n            keyboard={false}\r\n            backdrop=\"static\"\r\n        >\r\n            <Modal.Body>\r\n                <h6>{props.message}</h6>\r\n                <div id=\"div-load\">\r\n                    <h1><i className=\"fab fa-ethereum\" aria-hidden=\"true\" id=\"eth-icon\" /> <br></br></h1>\r\n                </div>\r\n            </Modal.Body>\r\n        </Modal>\r\n    );\r\n}\r\n","import React from \"react\";\r\n\r\nexport const HelpSection = () => {\r\n    return (\r\n        <div id=\"listContainer\">\r\n            <ol>\r\n                <li>¿Cuánto tiempo tarda mi token en generarse?</li>\r\n                <ul>\r\n                    <li>Al generar un Token éste debe ser registrado en la red Ethereum.\r\n                        Esto toma cierto tiempo, que dependerá de algunos factores como:\r\n                        <ul>\r\n                            <li>\r\n                                Congestionamiento de la red en el momento de creación del Token.\r\n                            </li>\r\n                            <li>\r\n                                Precio pagado por el gas. Puedes optar desde tu MetaMask por pagar\r\n                                un poco más por la operación, esto hará que se ejecute más rápido y, por\r\n                                lo tanto, estará disponible antes para su consulta.\r\n                            </li>\r\n                        </ul>\r\n                    </li>\r\n\r\n                </ul>\r\n            </ol>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport { createToken, lastToken, connectWallet, getCurrentWalletConnected } from \"./model/Interact.js\";\nimport { LastTokenTable} from \"./model/EventTable.js\";\nimport LogoSoferim from \"./model/LogoSoferim.png\"\nimport { ModalCreate, ModalEmpty, ModalWallet, ModalReject, ModalAlreadyExist, ModalLoad } from \"./model/Modal.js\";\nimport { HelpSection } from \"./model/Help.js\"\nimport Messages from \"./model/Messages.json\";\n\n\nconst App = () => {\n  //state variables\n  const setInitialState = [];\n  const [currentToken, setToken] = useState(\"\");\n  const [idToken, setIdToken] = useState(setInitialState);\n  const [modalShow, setModalShow] = useState(false);\n  const [modalEmptyShow, setModalEmptyShow] = useState(false);\n  const [modalWalletShow, setModalWalletShow] = useState(false);\n  const [modalLoadShow, setModalLoadShow] = useState(false)\n  const [modalReject, setModalReject] = useState(false);\n  const [walletAddress, setWallet] = useState(\"\");\n  const [status, setStatus] = useState(\"\");\n  const [hash, setHash] = useState(\"\");\n  const [alreadyShow, setModalAlreadyExist] = useState(false)\n  const [idContract, setIdContract] = useState(\"\")\n\n  //called only once\n  useEffect(async () => {\n    const { address, status } = await getCurrentWalletConnected();\n    setWallet(address);\n    setStatus(status);\n    addWalletListener();\n    updateData();\n    // ELIMINAR!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n    //document.getElementById(\"idInput\").value = 1;\n    //!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n    setIdToken(document.getElementById(\"idInput\").value);\n    document.getElementById(\"inputHash\").value = '';\n    setIdContract(document.getElementById(\"idContract\").value);\n  }, []);\n\n  const addWalletListener = () => {\n    if (window.ethereum) {\n      window.ethereum.on(\"accountsChanged\", (accounts) => {\n        if (accounts.length > 0) {\n          setWallet(accounts[0]);\n          setStatus(\"👆🏽 Genera un nuevo token!.\");\n        } else {\n          setWallet(\"\");\n          setStatus(\"🦊 Conecta tu billetera de MetaMask con el botón 'Conectar'.\");\n        }\n      });\n    } else {\n      setStatus(\n        <p>\n          {\" \"}\n          🦊{\" \"}\n          <a href={`https://metamask.io/download.html`}>\n            Debes intalar MetaMask en tu navegador para poder crear un token.\n          </a>\n        </p>\n      );\n    }\n  }\n\n  const updateData = async () => {\n    const lastTokenCreated = await lastToken();\n    setToken(lastTokenCreated.lastTokenCreated);\n    return lastTokenCreated.data\n  }\n\n  const onCreatePressed = async () => {\n    if (isNaN(idToken) || idToken == \"\") {\n      setModalEmptyShow(true)\n    } else {\n      const createdToken = await createToken(walletAddress, Number.parseInt(idToken));\n      if (createdToken.wallet == true) {\n        setModalWalletShow(true);\n      } else if (createdToken.exist == true) {\n        setModalAlreadyExist(true);\n      } else if (createdToken == \"\") {\n        setModalReject(true);\n      } else if (createdToken.success == true) {\n        setHash(createdToken.txHash);\n        document.getElementById('inputHash').value = createdToken.txHash\n        setModalLoadShow(true);\n        setTimeout(async () => {\n          const last = await updateData();\n          //setData(last);\n          setModalLoadShow(false);\n          setModalShow(true)\n        }, 15000)\n      }\n    }\n  }\n\n  const connectWalletPressed = async () => {\n    const walletResponse = await connectWallet();\n    if (walletResponse == 0) {\n      setModalWalletShow(true);\n      setStatus(walletResponse.status);\n    } else {\n      setStatus(walletResponse.status);\n      setWallet(walletResponse.address);\n    }\n  }\n\n  //the UI of our component\n  return (\n    <div id=\"root\">\n      <div id=\"container\">\n        <div id=\"header\">\n          <img id=\"logo\" src={LogoSoferim} alt=\"Soferim logo\"></img>\n          <button id=\"walletButton\" onClick={connectWalletPressed}>\n            {walletAddress.length > 0 ? (\n              \"Connected: \" +\n              String(walletAddress).substring(0, 6) +\n              \"...\" +\n              String(walletAddress).substring(38)\n            ) : (\n              <span>Conectar billetera</span>)}\n          </button>\n        </div>\n            <input id=\"inputHash\" type=\"hidden\"/>\n            <LastTokenTable currentToken={currentToken} /><h3 style={{ paddingTop: \"18px\" }}>ID de tu nuevo Token</h3><div>\n              <table id=\"buttonsTable\">\n                <tbody>\n                  <tr>\n                    <td>\n                      <input\n                          id=\"idInput\"\n                          defaultValue=\"Código de Token\"\n                          readOnly='readOnly'\n                        />\n                    </td>\n                    <td>\n                      <button\n                        id=\"publish\"\n                        onClick={onCreatePressed}>\n                        Generar\n                      </button>\n                    </td>\n                    <input type=\"hidden\" id=\"idContract\" value=\"1\"></input>\n                    <ModalEmpty\n                      show={modalEmptyShow}\n                      onHide={() => setModalEmptyShow(false)}\n                      message={Messages.data.empty.message} />\n                    <ModalWallet\n                      show={modalWalletShow}\n                      onHide={() => setModalWalletShow(false)}\n                      message={Messages.data.metaNotInstalled.message} />\n                    <ModalReject\n                      show={modalReject}\n                      onHide={() => setModalReject(false)}\n                      message={Messages.data.rejected.message} />\n                    <ModalCreate\n                      show={modalShow}\n                      onHide={setModalShow}\n                      hash={hash}\n                      token={currentToken}\n                      message={Messages.data.success.message}\n                      contract={idContract} />\n                    <ModalAlreadyExist\n                      show={alreadyShow}\n                      onHide={() => setModalAlreadyExist(false)}\n                      message={Messages.data.exists.message} />\n                    <ModalLoad\n                      show={modalLoadShow}\n                      onHide={() => setModalLoadShow(false)}\n                      message={Messages.data.load.message} />\n                  </tr>\n                </tbody>\n              </table>\n            </div>\n      </div>\n      <div id=\"helpSection\">\n        <HelpSection id=\"helpSection\" />\n      </div>\n    </div>\n\n  )\n}\n\nexport { App }\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {App} from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}